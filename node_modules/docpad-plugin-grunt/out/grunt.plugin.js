// Generated by CoffeeScript 1.9.3
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  module.exports = function(BasePlugin) {
    var GruntPlugin;
    return GruntPlugin = (function(superClass) {
      extend(GruntPlugin, superClass);

      GruntPlugin.prototype.name = 'grunt';

      GruntPlugin.prototype.config = {
        warnOnError: false
      };

      GruntPlugin.prototype.createEventHandlers = function(docpad) {
        docpad.getEvents().forEach((function(_this) {
          return function(eventName) {
            return _this[eventName] = function(opts, next) {
              var tasks;
              if (tasks = _this.getConfig()[eventName] || false) {
                _this.processGrunt(tasks, opts, next);
              } else {
                return next();
              }
              return _this;
            };
          };
        })(this));
        return this;
      };

      function GruntPlugin(opts) {
        var docpad;
        docpad = opts.docpad;
        this.createEventHandlers(docpad);
        GruntPlugin.__super__.constructor.apply(this, arguments);
        this.safeps = require('safeps');
        this.path = require('path');
        this.glob = require('glob');
        this;
      }

      GruntPlugin.prototype.processGrunt = function(tasks, opts, next) {
        var command, config, docpad, err, files, gruntPath, i, len, ref, rootPath, task;
        docpad = this.docpad;
        config = this.getConfig();
        rootPath = this.docpad.getConfig().rootPath;
        files = this.glob.sync('**/grunt-cli/bin/grunt', {
          cwd: rootPath,
          nosort: true
        });
        if (gruntPath = files[0] || false) {
          command = ['node', this.path.join(rootPath, gruntPath)];
          ref = tasks || [];
          for (i = 0, len = ref.length; i < len; i++) {
            task = ref[i];
            command.push(task);
          }
          this.safeps.spawn(command, {
            cwd: rootPath,
            output: true
          }, function(err) {
            if (err) {
              if (config.warnOnError) {
                docpad.log("warn", "Grunt Error: " + err.message);
              } else {
                return next(err);
              }
            }
            return next();
          });
        } else {
          err = new Error('Could not find the Grunt command line interface.');
          return next(err);
        }
        return this;
      };

      return GruntPlugin;

    })(BasePlugin);
  };

}).call(this);
